// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  name                String?
  password            String
  emailVerified       Boolean   @default(false)
  image               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  phoneNumber         String?   @unique
  phoneNumberVerified Boolean?  @default(false)
  gender              String?
  dob                 DateTime?
  passport            String?
  resetToken          String?
  resetTokenExpiresAt DateTime?

  sessions Session[]
  accounts Account[]
  bookings Booking[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Otp {
  id          String   @id @default(cuid())
  phoneNumber String
  otp         String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@map("otp")
}

// Cab Related schema
model Booking {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  orderRefId String?  @unique
  status     String
  otp        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Associations
  userId   String?
  user     User?   @relation(fields: [userId], references: [id])
  cabId    String?
  cab      Cab?    @relation(fields: [cabId], references: [id])
  driverId String?
  driver   Driver? @relation(fields: [driverId], references: [id])

  // Trip data
  tripStartDate DateTime?
  tripStartTime String?
  tripEndDate   DateTime?
  tripEndTime   String?
  lastLatitude  String?
  lastLongitude String?

  // Cancellation details
  cancellationReason  String?
  cancellationCharge  Float?
  refundAmount        Float?
  cancellationMessage String?

  @@map("booking")
}

model Cab {
  id          String   @id @default(cuid())
  cabId       Int      @unique
  model       String?
  number      String? // Vehicle number
  hasCNG      Boolean  @default(false)
  hasElectric Boolean  @default(false)
  roofTop     Boolean  @default(false)
  isAttached  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings     Booking[]
  licensePlate String[]

  @@map("cab")
}

model Driver {
  id            String   @id @default(cuid())
  name          String
  contactCode   String?
  contactNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bookings Booking[]

  @@map("driver")
}
